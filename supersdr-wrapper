#!/bin/bash

# Copyright (c) 2023 by Philip Collier, github.com/AB9IL
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version. There is NO warranty; not even for
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# BOOKMARK MODE ##############################################################
# Internet SDR Bookmarks: the script works with a processor which sorts
# a list of KiwiSDRs for good servers. The processor reads a bookmarks
# template and finds SDRs located in the desired geographic area. It will
# enter urls into the "server" section of the working bookmarks list.
#
# NOTES:
#  0) Channels are contained in a separate file, "stations."
#     Set up one channel per line in csv format:
#     description,band,region,url,frequency,mode,sdrtype
#  1) Server types are:
#         "kiwi" for KiwiSDR
#         "web" for WebSDR
#         "phantom" for phantomsdr
#         "openwebrx" for OpenWebRX
#  2) WebSDR bookmarks must be manually formatted and entered in the template.
#  3) KiwiSDR bookmarks are processed automatically using database information.
#  4) A channel is focused on one subject of interest.
#  5) NEW: A channel contains one frequency from one server.
#  6) NEW: Bands are any of: 'Longwave', 'Mediumwave', 'Shortwave', 'VHFlow',
#     'FMbroadcast', 'Airband', '2Meters'
#  7) Enter the bookmark info as a list of strings separated by commas:
#     BBC Radio 4 Longwave,Longwave,London,url,198,sam,kiwi
#  8) The "url" entry will contain the domain, subdomain (if used),
#     the port number, and trailing slash "/" (always used):
#     http://example.com:8073/
#  9) All frequencies must be saved as integer kHz.
# 10) Modes are: "cw", "lsb", "lsbw", "usb", "usbw", "am", "sam", "drm", "iq"
# 11) The preferred AM mode is synchronous AM (sam).
# 12) CW mode will default to "usb" with a 750 Hz offset
#     and a bandpass of 500 to 900 Hz.
# 13) Extended Single Sideband is set for an 8000 Hz banpass.
#     It should be designated as "lsbw" or "usbw".
# 14) DRM is available and is set for a 10 kHz bandpass
#
# Example bookmark syntax:
# BBC Radio 4 Longwave,Longwave,London,http://80m.live:8073/,198,sam,kiwi
# BBC Radio 4 Longwave(WebSDR),Longwave,London,http://websdr.ewi.utwente.nl:8901/,198,am,web
#
#MAP mode ####################################################################
# Uses the Dyatlov Map Maker.
# If necessary, the server data is updated, then an SDR map is
# opened inthe web browser.
#
# SERVER SELECTOR mode #######################################################
# Read from a list of KiwiSDR and Web-888 sites and open a stream in SuperSDR.
#
# Note: The list is derived from the Dyatlov SDR Map database.
#
# Specify the web browser command
# generic browser on Xserver:
#     browser='x-www-browser --new-tab'
# vivaldi:
#     browser='vivaldi --new-tab'
# brave flatpak:
#     browser='flatpak run com.brave.Browser'
browser='x-www-browser --new-tab'

# For KiwiSDR and Web-888 servers, use SuperSDR if available
superpath="/usr/local/src/supersdr"
use_supersdr=true

# specify the bookmarks file
BOOKMARKS_FILE="/usr/local/src/kiwidata/sdr-stream-bookmarks"

# specify the BANDS file:
BANDS_FILE="/usr/local/src/kiwidata/bands"

# specify the stations file
STATIONS_FILE="/usr/local/src/kiwidata/stations"

# specify the database file for the server selector
SERVER_LIST="/usr/local/src/kiwidata/kiwiservers"

# path to Dyatlov SDR map directory:
MAPDIR="/usr/local/src/dyatlov"

# KiwiSDR server data (for checking freshness)
receiver_data="$MAPDIR/kiwisdr_com.js"

# define the default frequency (kHz)
default_freq=10000

###############################################################################
# CAUTION: DRAGONS LIVE BELOW THIS LINE
###############################################################################

# database update, if necessary
stripper

# Set gui mode, if selected
[[ "$1" == "--gui" ]] && interface="gui"
[[ "$2" == "--gui" ]] && interface="gui"
[[ "$interface" ]] && export interface

start_bookmarks_streamer() {
    for target in $field; do
        # extract url fragments from target
        read -r url freq mode server_type dummy <<<"$field"
    done

    # make mode lower case; set bandpass and zoom
    mode="${mode,,}"
    [[ "$mode" == "am" ]] && [[ "$server_type" == "kiwi" ]] &&
        mode="sam" && bandpass="-4000,4000" && zoom="z10"
    [[ "$mode" == "amsync" ]] && [[ "$server_type" == "web" ]] &&
        mode="am"
    # WebSDR default to envelope detector because not enough have am sync option
    [[ "$mode" == "cw" ]] && [[ "$server_type" == "kiwi" ]] &&
        mode="usb" && bandpass="550,950" &&
        freq=$(echo "$freq - 0.75" | bc) && zoom="z13"
    # KiwiSDR cw offset 750 Hz
    [[ "$mode" == "am" ]] && bandpass="-4000,4000" && zoom="z10"
    [[ "$mode" == "sam" ]] && bandpass="-4000,4000" && zoom="z10"
    [[ "$mode" == "drm" ]] && bandpass="-5000,5000" && zoom="z10"
    [[ "$mode" == "lsb" ]] && bandpass="-3500,-100" && zoom="z13"
    [[ "$mode" == "usb" ]] && bandpass="100,3500" && zoom="z13"
    [[ "$mode" == "lsbw" ]] && bandpass="-8000,-10" && zoom="z10" && mode="lsb"
    [[ "$mode" == "usbw" ]] && bandpass="10,8000" && zoom="z10" && mode="usb"
    [[ "$mode" == "iq" ]] && bandpass="-4000,4000" && zoom="z10"

    # connect to the SDR server
    case "$server_type" in
    kiwi)
        # stream from KiwiSDRs with SuperSDR
        domain="$(echo "$url" | awk -F: '{print substr($2,3)}')"
        port="$(echo "$url" | awk -F: '{print substr($3,1,4)}')"

        # send error notification and quit if domain is "example.com"
        [[ "${domain}" == "example.com" ]] &&
            notify-send "Exiting! No suitable server found." &
        [[ "${domain}" == "example.com" ]] && exit

        # Stream from SuperSDR
        [[ "$use_supersdr" ]] && cd "$superpath" &&
            ./supersdr.py --kiwiserver "${domain}" --kiwiport "${port}" -f "${freq}"

        # stream from KiwiSDRs with web browser
        [[ "$use_supersdr" ]] || ${browser} "${url}""?f=""${freq}""/""${bandpass}""${mode}""${zoom}""&1hz"
        ;;
    web)
        # stream from WebSDR
        ${browser} "${url}?tune=${freq}${mode}"
        ;;
    pantom)
        # stream from PhantomSDR
        ${browser} "${url}?tune=${freq}000&modulation=${mode}"
        ;;
    openwebrx)
        # stream from OpenWebRX198
        ${browser} "${url}#freq=${freq}000,mod=${mode}"
        ;;
    esac
}

sdrmap() {
    ${browser} "file://${MAPDIR}/index.html"
}

kill_radio() {
    # kill the processes after SuperSDR stops
    pkill -9 -f supersdr.py
    exit 0
}

case "$1" in
--bookmarks)
    readarray BANDS <$BANDS_FILE

    # open the band selection menu
    [[ "$interface" == "gui" ]] && COMMAND="rofi -i -dmenu -p Select -l 9"
    [[ "$interface" == "gui" ]] || COMMAND="fzf --layout=reverse --header=Select:"

    # Select the desired band
    BAND_CHOICE=$(echo "${BANDS[@]}" | awk -F, '{printf $1"\n"}' | $COMMAND)

    [[ -z "$BAND_CHOICE" ]] && echo "No selection made, exiting..." && exit 0

    # read the bookmarks
    readarray CHANNELS <$BOOKMARKS_FILE

    # open the second menu
    [[ "$interface" == "gui" ]] && COMMAND="rofi -i -dmenu -p Select -l 20"
    [[ "$interface" == "gui" ]] || COMMAND="fzf --layout=reverse --header=Select:"

    # Select the desired channel
    CHOICE=$(echo "${CHANNELS[@]}" | sed '/^$/d;/#.*/d' | awk -F, '{printf $1" "$2" "$3" "$4" "$5" "$6"\n"}' | grep "$BAND_CHOICE" | $COMMAND)

    [[ -z "$CHOICE" ]] && echo "No selection made, exiting..." && exit 0

    # read from the bookmarks list again and grep for the choice.
    readarray CHANNELS <$BOOKMARKS_FILE
    # stream from KiwiSDRs with SuperSDR
    field="$(echo "${CHANNELS[@]}" | awk -F, '{printf $1" "$2" "$3" "$4" "$5" "$6"\n"}' | grep "$CHOICE" | sed 's/.*\(http:[^"]*\).*/\1/')"
    [[ -z "$field" ]] || start_bookmarks_streamer &
    ;;
--servers)
    # if no bookmarks, quit
    [[ -z "$SERVER_LIST" ]] && echo "No server list, exiting..." && exit 0

    # read from the server list
    readarray SERVERS <$SERVER_LIST

    # open a menu
    [[ "$interface" == "gui" ]] && COMMAND="rofi -i -dmenu -p Select -l 20"
    [[ "$interface" == "gui" ]] || COMMAND="fzf --layout=reverse --header=Select:"

    # Select the desired server
    CHOICE=$(echo "${SERVERS[@]}" | sed '/^$/d;/#.*/d' | awk -F\" '{printf $2 $3"\n"}' | $COMMAND)

    # Exit if nothing selected
    [[ -z "$CHOICE" ]] && echo "No selection made, exiting..." && exit 0

    # read from the server list again and grep for the choice.
    readarray SERVERS <$SERVER_LIST
    # stream from KiwiSDRs with SuperSDR
    field="$(echo "${SERVERS[@]}" |
        awk -F\" '{printf $2 $3"\n"}' |
        grep "$CHOICE" |
        sed 's/.*\(http:[^ ]*\).*/\1/') $default_freq am kiwi"
    # Connect to the server.
    [[ -z "$field" ]] || start_bookmarks_streamer &
    ;;
--map)
    sdrmap
    ;;
--kill)
    kill_radio
    ;;
*)
    echo "
    $0 <command> <interface>

    Commands:
    --bookmarks   Select a station from the bookmarks (server is auto selected)
    --servers     Select from currently running SDR servers
    --map         Open the global SDR map.
    --kill        Terminate instances of SuperSDR

    Interfaces:
    <blank>  defaults to fzf
    --fzf runs menus in the terminal (default)
    --gui runs menus in Rofi

        " >&2
    exit 3
    ;;
esac
